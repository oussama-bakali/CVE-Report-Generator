import pandas as pd 
import datetime
import numpy as np
#replace that with corresponding risk.xlsx file
#replace data['adequate column names']
data=pd.read_excel('cverisk.xlsx',true_values=['TRUE'],false_values=['FALSE'])
data['Highest CVE risk factors']=data['Highest CVE risk factors'].dropna()
data['Highest CVE risk factors']=data['Highest CVE risk factors'].fillna("Attack complexity: none, Attack vector: none, Critical severity:0, none")    
data['Highest severity']=data['Highest severity'].fillna("none")
data['Highest CVSS']=data['Highest CVSS'].fillna(0)
data['Impacted resource type']=data['Impacted resource type'].fillna('noresource')
data['Highest risk score']=data['Highest risk score'].fillna(0)
data['Description']=data['Description'].fillna('noavailabledescription')
data['All impacted packages']=data['All impacted packages'].fillna('nopackage')
data['CVE link']=data['CVE link'].fillna('nolinkavailable')
missingremoteexecution=~data['Highest CVE risk factors'].str.contains('Remote execution', case=False,na=False)
missingPOC=~data['Highest CVE risk factors'].str.contains('POC', case=False,na=False)
missinginthewild=~data['Highest CVE risk factors'].str.contains('Exploit exists - in the wild', case=False,na=False)
missinghighdos=~data['Highest CVE risk factors'].str.contains('DoS - High', case=False,na=False)


recentvulnerability=~data['Highest CVE risk factors'].str.contains('Recent vulnerability',case=False,na=False)
nocriticalseverity=~data['Highest CVE risk factors'].str.contains('Critical severity',case=False,na=False)
lowattackcomplexity=~data['Highest CVE risk factors'].str.contains('Attack complexity: low',case=False,na=False)

missingremoteexecution=~data['Highest CVE risk factors'].str.contains('Remote execution', case=False,na=False)
packageinuse=~data['Highest CVE risk factors'].str.contains('Package in use', case=False,na=False)
noattackvectornetwork=~data['Highest CVE risk factors'].str.contains('Attack vector: network',case=False,na=False)
hasfix=~data['Highest CVE risk factors'].str.contains('Has fix',case=False,na=False)
data.loc[noattackvectornetwork,'Highest CVE risk factors'] =',Attack-vector-network:none'+data.loc[noattackvectornetwork,'Highest CVE risk factors']
data.loc[nocriticalseverity,'Highest CVE risk factors'] =', Criticalseverity:none,'+data.loc[nocriticalseverity,'Highest CVE risk factors']
data.loc[missinghighdos,'Highest CVE risk factors'] =', DoS-High:none,'+data.loc[missinghighdos,'Highest CVE risk factors']
data.loc[missingPOC,'Highest CVE risk factors'] =', Exploit exists-POC:none'+data.loc[missingPOC,'Highest CVE risk factors']
data.loc[missinginthewild,'Highest CVE risk factors'] ='Exploit exits-in the wild:none ,'+data.loc[missinginthewild,'Highest CVE risk factors']
data.loc[hasfix,'Highest CVE risk factors'] =', Hasfix:none,'+data.loc[hasfix,'Highest CVE risk factors']

data.loc[missingremoteexecution,'Highest CVE risk factors'] ='Remoteexecution:none,'+data.loc[missingremoteexecution,'Highest CVE risk factors']
data.loc[recentvulnerability,'Highest CVE risk factors'] ='Recentvulnerability:none,'+data.loc[recentvulnerability,'Highest CVE risk factors']
data.loc[packageinuse,'Highest CVE risk factors'] ='packageinuse:none,'+data.loc[packageinuse,'Highest CVE risk factors']
if (lowattackcomplexity.any()):

    data.loc[lowattackcomplexity,'Highest CVE risk factors']='low attack complexity:none,'+data.loc[lowattackcomplexity,'Highest CVE risk factors']
else:
    data.loc[lowattackcomplexity,'Highest CVE risk factors']='low attack complexity:present,'+data.loc[lowattackcomplexity,'Highest CVE risk factors']
pairs=data['Highest CVE risk factors']
sorting_order = [
    "low attack complexity",
    "packageinuse",
    "Recentvulnerability",
    "Attackvector",
    "Critical severity",
    "DoS - High",
    "Exploit exists - POC",
    "Exploit exists - in the wild",
    "Has fix",
    "Remoteexecution",
    
    
]


# Sort the pairs based on the custom sorting order
sorted_pairs = sorted(pairs, key=lambda x: sorting_order.index(x.split(":")[0]))

# Join the sorted pairs back into a single row using the comma separator
sorted_row = ",".join(sorted_pairs)

# Print the sorted row
print(sorted_pairs)

data['Highest CVE risk factors']=sorted_pairs





print(data['Highest CVE risk factors'])
orginalheaders=data.columns.tolist()

#replace that with corresponding cleaned.xlsx 
data.to_excel("cleaned.xlsx",index=False,columns=orginalheaders)
data10=pd.read_excel('cleanedprisma.xlsx')
data10=data10.drop('Highest environmental risk factors',axis=1)
new_columns=data10['Highest CVE risk factors'].str.split(',',expand=True)
#you can choose another ones if you want
new_column_names = [
    "low attack complexity",
    "Attackvector",
    "Critical severity",
    "DoS - High",
    "Exploit exists - POC",
    "Exploit exists - in the wild",
    "Has fix",
    "Remoteexecution",
    "packageinuse",
    "Recentvulnerability",
    "0","1","2","3","4"
]
for j in range(len(new_columns.columns)):

    for x in range(len(new_column_names)):
   

    
        print(new_columns[j].values[j])
        if new_column_names[x] in new_columns[j].values:
           new_columns[j].values[j] = new_column_names[x]
        
        
    
new_columns.columns=new_column_names
#cleaning data
df_without_columndf=data10.drop('Highest CVE risk factors',axis=1)
newdata=pd.concat([df_without_columndf,new_columns],axis=1)
newdata.to_excel('finalcleaned.xlsx',index=True)
#replace that with the file
data1=pd.read_excel("myfile.xlsx")
data1['published']=data1['Published'].fillna('nodateavailable')
currentdate = datetime.date.today()
formatted_date = currentdate.strftime("%d/%m/%Y")
date = pd.to_datetime(data1['Published'])

data1['agevulnerabilityage'] = currentdate - date.dt.date

data1.to_excel("myfile1.xlsx",index=False)
data2 = pd.read_excel("myfile1.xlsx")

# Update 'SLA' column based on conditions
data2.loc[data2['CVSS']>=7, 'SLA'] = 'NO'
data2.loc[data2['CVSS']<7, 'SLA'] = 'YES'
data2.loc[data2['SLA'].isnull(), 'SLA'] = 'NO'

# Save the modified data to 'twistlock2.xlsx' without the index
data2.to_excel("myfile2.xlsx", index=False)
df1 = pd.read_excel('finalcleaned.xlsx')
df1 = df1.rename(columns={'ID': 'CVE ID'})

# Read the second CSV file
df2 = pd.read_excel('myfile2.xlsx')

# Perform the merge based on the common column
merged_df = pd.merge(df1, df2, on='CVE ID' ,how='outer')

# Save the merged DataFrame to a new CSV file
merged_df.to_excel('merged_file.xlsx', index=False)
df8 = pd.read_excel('filetomerge.xlsx')

df8 = df8.rename(columns={'cve':'CVE ID'})

# Read the second CSV file
df7 = pd.read_excel('merged_file.xlsx')

# Perform the merge based on the common column
merged_df = pd.merge(df8, df7, on='CVE ID')

# Save the merged DataFrame to a new CSV file
merged_df.to_excel('merged_file2.xlsx', index=False)
CISAkey = pd.read_excel("cisa.xlsx")
CISAkey = CISAkey.rename(columns={'cveID': 'CVE ID'})
finalcleaned = pd.read_excel("merged_file2.xlsx")

cisacveid = CISAkey['CVE ID']
reportfile = pd.merge(finalcleaned, CISAkey, on='CVE ID', how='left')

reportfile['CISAKEY'] = reportfile.apply(
    lambda row: 'TRUE' if pd.notna(row['CVE ID']) else 'FALSE', axis=1
)
#columns names
column_range = ['CVE ID', 'vendorProject', 'product', 'vulnerabilityName', 'dateAdded', 'shortDescription', 'requiredAction', 'dueDate', 'notes']


# Assign 'Priority' based on 'Highest CVSS' values
reportfile['Priority'] = np.where((reportfile['Highest CVSS'] >= 9.8) & (reportfile['Highest CVSS'] <= 10), '1+', '2')

print(cisacveid.values)
reportfile.to_excel('reportfile.xlsx', index=False)