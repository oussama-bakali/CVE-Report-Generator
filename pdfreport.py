import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import matplotlib.backends.backend_pdf as pdf
from matplotlib.table import Table
import datetime

currentdate = datetime.date.today()
formatted_date = currentdate.strftime("%d/%m/%Y")
pdfsave = pdf.PdfPages('report.pdf')

# Print the formatted date
print(formatted_date)
file = pd.read_excel("merged_file2.xlsx")
data = pd.read_excel("reportfile.xlsx")
highseverity = data[data['Highest severity'] == 'high']
CriticalSeverity = data[data['Highest severity'] == 'critical']
noneseverity = data[data['Highest severity'] == 'none']

cvss = file['Highest CVSS']
epss = file['epss']
cveid=file['CVE ID']
colors = []
data.loc[(data['Highest severity']=='high')& (data['SLA']=='YES'), 'highSLA'] = 'TRUE'
data.loc[(data['Highest severity']=='high')& (data['SLA']=='NO'), 'nohighSLA'] = 'FALSE'
data.loc[(data['Highest severity']=='critical')& (data['SLA']=='YES'), 'criticalSLA'] = 'TRUE'
data.loc[(data['Highest severity']=='critical')& (data['SLA']=='NO'), 'nocriticalSLA'] = 'FALSE'
data.loc[(data['Highest severity']=='none')& (data['SLA']=='YES'), 'nolowSLA'] = 'TRUE'
data.loc[(data['Highest severity']=='none')& (data['SLA']=='NO'), 'lowSLA'] = 'FALSE'
slanumbers=data[data['SLA']=='NO']
noslanumbers=data[data['SLA']=='YES']
hasfix=data[data['Has fix']=='true']
nofix=file.shape[0]-hasfix.shape[0]
date = pd.to_datetime(data['Published'])

# Print the number of each severity
print("Number of high severities:", highseverity.shape[0])

print("Number of critical severities:", CriticalSeverity.shape[0])


donutdiagram = pd.DataFrame(
    [
     ["high", highseverity.shape[0]], ["critical", CriticalSeverity.shape[0]],["none",noneseverity.shape[0]]],
    columns=['severities', 'tests'])

agevulnerabilityage = 'agevulnerabilityage'
data['agevulnerabilityage'] = currentdate - date.dt.date
data.to_csv('modifiedfile.csv', index=False)

client = "test"
cvefrequency = data['CVE ID'].value_counts()
cvssfrequency = data['CVSS'].value_counts()

print(cvssfrequency.idxmax())
print(cvssfrequency[cvssfrequency.idxmax()])
print(cvssfrequency)
print(cvefrequency)

labels = donutdiagram['severities']
sizes = donutdiagram['tests']

# Create the donut pie chart
fig, ax = plt.subplots()

# Plot the donut pie chart
ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
plt.title("severities diagram")
# Save the figure with the chart
image_filename = 'donut_pie_chart.png'
plt.savefig(image_filename)

# Create the table for the chart
severities_data = [
                   ['High', highseverity.shape[0]],
                 
                   ['Critical', CriticalSeverity.shape[0]]
                   ,['none',noneseverity.shape[0]]]
severities_table_chart = Table(ax, bbox=[0, -0.4, 1, 0.2])
severities_table_chart.set_fontsize(12)

for i, row in enumerate(severities_data):
    for j, cell in enumerate(row):
        severities_table_chart.add_cell(i, j, width=0.2, height=0.1, text=str(cell))

# Save the figure with the table as a PDF



# Create a new figure for the table
fig_table = plt.figure(figsize=(8, 2))
ax_table = fig_table.add_subplot(111)
ax_table.axis('off')

# Create the table for the new figure
severities_table = Table(ax_table, bbox=[0, 0, 1, 1])
severities_table.set_fontsize(12)

for i, row in enumerate(severities_data):
    for j, cell in enumerate(row):
        severities_table.add_cell(i, j, width=0.2, height=0.1, text=str(cell))

# Add the table to the new figure
ax_table.add_table(severities_table)
slaseverities=[['highslaseverities',data[data['nohighSLA']=='FALSE'].shape[0]],['lowslaseverities',data[data['lowSLA']=='FALSE'].shape[0]],['criticalaseverities',data[data['nocriticalSLA']=='FALSE'].shape[0]]]
clienttable=[['nameofreportdesirer',client],['scan','test'],['frequencycwe',cvssfrequency.idxmax()],['numberoffixedseverities',hasfix.shape[0]],['numberofnonefixedseverities',file.shape[0]-hasfix.shape[0]],['correspondingnamefrequency',cvssfrequency[cvssfrequency.idxmax()]],['numberofvulnerabilites',file.shape[0]],['numberofhighSla',slanumbers.shape[0]],['numberofnoslanumbers',noslanumbers.shape[0]]]
fig_additional_table = plt.figure(figsize=(8, 2))
ax_additional_table = fig_additional_table.add_subplot(111)
ax_additional_table.axis('off')
additional_table = Table(ax_additional_table, bbox=[0, 0, 1, 1])
additional_table.set_fontsize(12)
for i, row in enumerate(clienttable):
    for j, cell in enumerate(row):
        additional_table.add_cell(i, j, width=0.2, height=0.1, text=str(cell))
sladonut=pd.DataFrame([['highslaseverities',data[data['nohighSLA']=='FALSE'].shape[0]],['criticalseverities',data[data['nocriticalSLA']=='FALSE'].shape[0]],['lowslaseverities',data[data['lowSLA']=='FALSE'].shape[0]]],columns=['severities', 'tests'])
# Add the second table to the new figure
labels = sladonut['severities']
sizes = sladonut['tests']

# Create the donut pie chart
fig1, ax = plt.subplots()
plt.title("sla severities")
# Plot the donut pie chart
ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)

ax_additional_table.add_table(additional_table)
#slatable=['highsla',]
fig_additional_table1 = plt.figure(figsize=(8, 2))
ax_additional_table1 = fig_additional_table1.add_subplot(111)
ax_additional_table1.axis('off')
additional_table1 = Table(ax_additional_table1, bbox=[0, 0, 1, 1])
additional_table1.set_fontsize(12)
for i, row in enumerate(slaseverities):
    for j, cell in enumerate(row):
        additional_table1.add_cell(i, j, width=0.2, height=0.1, text=str(cell))

# Add the second table to the new figure
ax_additional_table1.add_table(additional_table1)
ax_additional_table1.text(0.5, 0.95, "sla severities", ha='center', va='center', transform=plt.gca().transAxes)
fig_table.text(0.5, 0.95, "severities table", ha='center', va='center')
ax_additional_table.text(0.5, 0.95, "client information", ha='center', va='center', transform=plt.gca().transAxes)
pdfsave.savefig(fig_additional_table)
# Save the figure with the table as a PDF
pdfsave.savefig(fig_table)
pdfsave.savefig(fig_additional_table1)
pdfsave.savefig(fig)
pdfsave.savefig(fig1)
fig2 = plt.figure()
ax2 = fig2.add_subplot(111)
for cvss_value,epssvalue,cveidvalue in zip(cvss,epss,cveid):
    if epssvalue>0.4 and epssvalue<0.6 and cvss_value>7 and cvss_value<7.49 :
        ax2.annotate(cveidvalue,(cvss_value,epssvalue), textcoords="offset points", xytext=(-5, 5),fontsize=8)
# Assign colors based on cvss and epss values
for cvss_value, epss_value in zip(cvss, epss):
    if epss_value > 0.8:
        ax2.annotate('high exploitability', (0.8,0.9), textcoords="offset points", xytext=(10, 10))
    if epss_value > 0.4:
        ax2.annotate('Deprioritize', (0.1, 0.35), textcoords="offset points", xytext=(10, 10))
       
    if epss_value > 0.2 and cvss_value > 0.8:
        ax2.annotate('Large volume of high \nseverity vulnerabilities', (7, 0.2), textcoords="offset points", xytext=(5, 5))
    if epss_value > 0.9 and cvss_value > 0.8:
        ax2.annotate('Prioritize', (8, 0.9), textcoords="offset points", xytext=(5, 5))
    
    if cvss_value < 5 and epss_value > 0.5:
        colors.append('orange')
    elif cvss_value > 7 and cvss_value < 8 and epss_value > 5:
        colors.append('red')
    elif cvss_value > 5 and epss_value < 0.2:
        colors.append('blue')
    elif cvss_value > 8 and epss_value < 0.4:
        colors.append('red')
    elif epss_value > 0.4 and epss_value < 0.6:
        colors.append('orange')
    else:
        colors.append('yellow')

# Create scatter plot with colored points
ax2.scatter(cvss, epss, label='high bp low heartrate', color=colors)
plt.grid(True)
# Set axis labels
ax2.annotate('',
             xytext=(0.2, 0.4), xycoords='data',
             xy=(9,0.9), textcoords='data',
             arrowprops=dict(arrowstyle='<-', lw=1.5, color='black'))
ax2.set_xlabel("CVSS")
ax2.set_ylabel("EPSS score")
ax2.set_title('EPSS score compare to cvss bare score (NVD)')
# Display the plot


pdfsave.savefig(fig2)
plt.savefig("cvss.png")
plt.show()
pdfsave.close()
